import heapq

def a_star_search(graph, start, goal, h):
    open_list = []
    heapq.heappush(open_list, (0 + h[start], start))

    g = {start: 0}
    parents = {start: None}
    closed_list = set()

    while open_list:
        current_f, current_node = heapq.heappop(open_list)

        if current_node == goal:
            path = []
            while current_node:
                path.append(current_node)
                current_node = parents[current_node]
            return path[::-1]

        closed_list.add(current_node)

        for neighbor, cost in graph[current_node]:
            if neighbor in closed_list:
                continue

            tentative_g = g[current_node] + cost
            if neighbor not in g or tentative_g < g[neighbor]:
                g[neighbor] = tentative_g
                f = tentative_g + h[neighbor]
                heapq.heappush(open_list, (f, neighbor))
                parents[neighbor] = current_node

    return None

graph = {
    'A': [('B', 1), ('C', 3)],
    'B': [('D', 3), ('E', 1)],
    'C': [('F', 5)],
    'D': [('G', 1)],
    'E': [('G', 4)],
    'F': [('G', 2)],
    'G': []
}

h = {
    'A': 6,
    'B': 4,
    'C': 4,
    'D': 2,
    'E': 2,
    'F': 2,
    'G': 0
}

path = a_star_search(graph, 'A', 'G', h)
print("Path:", path)

